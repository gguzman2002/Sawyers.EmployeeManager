@page "/employees/list"
@page "/employees/list/{currentPage:int}"
@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer
@inject IJSRuntime JS

<PageTitle>Employees</PageTitle>

<h2>Employees</h2>

@if (Employees is null)
{
    <h2>Loading...</h2>
}
else
{
    <section class="employeebox-employeeoverview">

        <div class="grid">
            <h3 class="bold">Firstname</h3>
            <h3 class="bold">Lastname</h3>
            <h3 class="bold">Developer</h3>
            <h3 class="bold">Department</h3>
            <h3 class="bold"></h3>
        </div>

        @foreach (var employee in Employees)
        {
            <div class="grid">
                <p>@employee.FirstName</p>
                <p>@employee.LastName</p>
                @if (@employee.IsDeveloper is true)
                {
                    <p>Yes</p>
                }
                else
                {
                    <p>No</p>
                }
                <p class="text-align-center">@employee.Department?.Name</p>
                <p>
                    <a href="/employees/edit/@employee.Id">Edit</a>
                    <button
                    @onclick="() => HandleDelete(employee)">
                        Delete
                    </button>
                </p>
            </div>
        }

        <ul class="flex-row">
            <li>
                <a class="bold" href="/employees/list/@(CurrentPage == 1 ? CurrentPage : CurrentPage - 1)">Previous</a>
            </li>
            @for (int i = 1; i <= TotalPages; i++)
            {
                <li>
                    <a class="bold" href="/employees/list/@i">@i</a>
                </li>
            }
            <li>
                <a class="bold" href="/employees/list/@(CurrentPage == TotalPages ? CurrentPage : CurrentPage + 1)">Next</a>
            </li>
        </ul>
    </section>
}

@code {
    [Parameter]
    public int? CurrentPage { get; set; }

    private Employee[]? Employees { get; set; }

    private int TotalPages { get; set; }

    private const int ItemsPerPage = 4;

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (CurrentPage is null or < 1)
        {
            NavigationManager.NavigateTo("/employees/list/1");
            return;
        }

        using var context = ContextFactory.CreateDbContext();

        var employeeCount = await context.Employees.CountAsync();
        TotalPages = employeeCount == 0
        ? 1
        : (int)Math.Ceiling((double)employeeCount / ItemsPerPage);

        if (CurrentPage > TotalPages)
        {
            NavigationManager.NavigateTo($"/employees/list/{TotalPages}");
            return;
        }

        StateContainer.EmployeeOverviewPage = CurrentPage.Value;

        var itemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;

        Employees = await context.Employees
        .Include(emp => emp.Department)
        .OrderBy(emp => emp.LastName)
        .Skip(itemsToSkip)
        .Take(ItemsPerPage)
        .ToArrayAsync();
    }

    private async Task HandleDelete(Employee employee)
    {
        var isOK = await JS.InvokeAsync<bool>("confirm", $"Delete employee {employee.FirstName} {employee.LastName}?");

        if (isOK)
        {
            try
            {
                using var context = ContextFactory.CreateDbContext();
                context.Employees.Remove(employee);
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                // If we get this exception, the employee was deleted or modified.
                // As we reload the data below, let's ignore this exception.
            }
            await LoadData();
        }
    }
}